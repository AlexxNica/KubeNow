#!/bin/bash

set -e

VERSION="development/openstack"
PROVISIONER_IMAGE="andersla/provisioners"

function usage {
  cat <<EOF

Usage: kn <command>
Commands:
  help                 print this message
  init <CLOUD> <DIR>   creates a new project in the supplied directory
                       CLOUD=<gce|aws|openstack|azure>
  apply                apply configuration
  destroy              destroy deployment
  kubectl              run kubectl on the master. More help: kn kubectl help
  helm                 run helm on the master. More help: kn helm help
  terraform            run Terraform. More help: kn terraform --help
  ansible              run Ansible. More help: kn ansible --help
  ansible-playbook     run an Ansible playbook.
                       More help: kn ansible-playbook --help
  openstack            run a command against you Openstack provider: More help: kn openstack help
  kubetoken            generate and print a kubeadm token
  ssh <host>           ssh to <host> defined in ansible inventory file, default <host> is master
  bash                 run an interactive bash promt in the kubenow provisioners docker-image
  az                   run Microsoft Azure CLI: More help: kn az help
  git
  upgrade <version>    upgrade kn to <latest|latest-stable|master|"tag">

EOF
}

#
# Adapted from stackoverflow-questions-59895
#
function resolve_links {
  source="$1"
  # resolve $source until the file is no longer a symlink
  while [ -h "$source" ]; do
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    # if $dir was a relative symlink, we need to resolve it relative to
    # the path where the symlink file was located
    source="$(readlink "$source")"
    [[ $dir != /* ]] && dir="$dir/$dir"
  done
  echo "$source"
}

#
# Description of function
#
function upgrade {
  echo "upgrade version: $version"
  tag=""
  case "$version" in
    latest)
      tag="$(curl https://api.github.com/repos/kubenow/KubeNow/releases | \
            jq -r '.[0].tag_name')"
      ;;
    latest-stable)
      echo "lateststable"
      tag="$(curl https://api.github.com/repos/kubenow/KubeNow/releases | \
                   jq -r '[.[] | select(.prerelease==false) | .tag_name'][0])"
      ;;
    *)
      tag="$version"
      ;;
  esac

  url="https://raw.githubusercontent.com/kubenow/KubeNow/$tag/bin/kn"
  url="https://api.github.com/repos/kubenow/KubeNow/contents/bin/kn?ref=$tag"

  # get full filename of this script
  absolute_file="$(resolve_links "${BASH_SOURCE[0]}")"

  # download new version to temp
  tmpfile=$(mktemp)
  curl -f "$url" -o "$tmpfile" || ( >&2 echo -e "\nError trying to download file $url\n"; exit 1 )

  # copy file over old (preserves file attr from original file)
  rsync --no-perms --no-owner --no-group "$tmpfile" "$absolute_file" || ( >&2 echo -e "\nCould not replace file: $absolute_file - do you have sudo rights?\n"; exit 1 )

  rm "$tmpfile"

  # pull latest docker
  docker pull kubenow/provisioners:"$version"

  echo -e "\nUpdated ok to version $tag\n"
}

echo "kn version: $VERSION"
provisioner_image_tag="${VERSION/\//-}"

# Get all local user group id:s (to be added to user inside docker-image)
LOCAL_GROUP_IDS="$(id -G)"

# Replace command for commands that are overriding
# standard bash/ubuntu commands
command="$1"
if [ -n "$command" ]; then
  shift; set -- "$(sed -e 's/^ssh$/ssh-kn/' <<< $command)" "$@"
  shift; set -- "$(sed -e 's/^init$/init-kn/' <<< $command)" "$@"
fi

case "$1" in
  help)
    usage
    exit
    ;;

  upgrade)
    version="${2:-$VERSION}"

    upgrade "$version"

    exit
    ;;

  install-autocomplete)
    #/usr/local/etc/bash_completion.d
    #/etc/bash_completion.d
    >&2 echo "Error: could not find a suitable autocomplete path, e.g. /etc/bash_completion.d or /usr/local/etc/bash_completion.d"
    echo "You could provide preferred installation path with argument --preferred=/path/to/bash_completion.d"
    exit
    ;;

  init-kn|init-os)
    # Validate
    if [ "$#" -ne 3 ]; then
      >&2 echo "Error: wrong number of argument for the init command"
      usage
      exit 1
    fi

    HOST_CLOUD="$2"
    # Check for recognized cloud provider
    if ! grep -qw "$HOST_CLOUD" <<< "openstack gce azure aws"; then
      >&2 echo "Error: unrecognized host cloud '$HOST_CLOUD'"
      exit 1
    fi

    # shellcheck disable=SC2086,SC2046
    INIT_DIR=$(cd $(dirname $3) && echo $PWD/$(basename $3))
    if [ -f "$INIT_DIR" ] || [ -d "$INIT_DIR" ]; then
      >&2 echo "Error: $INIT_DIR already exists"
      exit 1
    fi

    mkdir -p "$INIT_DIR"

    # Wrap docker run
    # shellcheck disable=SC2086
    echo "Running command with docker..."
    docker run --rm -it \
      -v "$INIT_DIR":/KubeNow_config \
      -v "$INIT_DIR":/KubeNow_root \
      -e "LOCAL_USER_ID=$UID" \
      -e "LOCAL_GROUP_IDS=$LOCAL_GROUP_IDS" \
      "$PROVISIONER_IMAGE":"$provisioner_image_tag" \
      "/opt/KubeNow/bin/docker-entrypoint" "$@"
    ;;

  terraform|ansible|ansible-playbook|kubetoken|apply|destroy|kubectl|helm|openstack|az|ssh-kn|bash|git)
    # Validate PWD (not needed for a selection of commands)
    if ! grep -qw "$1" <<< "kubetoken az openstack bash git"; then
      if [ ! -f ssh_key ] || [ ! -f ssh_key.pub ] ; then
        >&2 echo "Error: ssh_key not found. Are you in the right directory?"
        exit 1
      fi
      if [ ! -f terraform.tfvars ] ; then
        >&2 echo "Error: terraform.tfvars not found. Please create one using the templates."
        exit 1
      fi
      if [ ! -f ansible.cfg ] ; then
        >&2 echo "Error: ansible.cfg not found. Are you in the right directory?"
        exit 1
      fi
    fi

    # Wrap docker run
    # shellcheck disable=SC2086
    echo "Running command with docker..."
    docker run --rm -it \
      -v "$PWD":/KubeNow_config \
      -v "$PWD":/KubeNow_root \
      -e "LOCAL_USER_ID=$UID" \
      -e "LOCAL_GROUP_IDS=$LOCAL_GROUP_IDS" \
      -e "TERRAFORM_OPT=$TERRAFORM_OPT" \
      -e "ANSIBLE_OPT=$ANSIBLE_OPT" \
      --env-file <(env | grep OS_) \
      --env-file <(env | grep TF_) \
      --env-file <(env | grep GOOGLE_) \
      --env-file <(env | grep AWS_) \
      --env-file <(env | grep ARM_) \
      --env-file <(env | grep KUBENOW_) \
      "$PROVISIONER_IMAGE":"$provisioner_image_tag" \
      "/KubeNow_root/bin/docker-entrypoint" "$@"
    ;;
  "")
    echo "No <command> specified" >&2
    usage
    exit
    ;;
  *)
    printf '"%s" is not a valid command\n' "$1" >&2
    usage
    exit 1
    ;;

esac
