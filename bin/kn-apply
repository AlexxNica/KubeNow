#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

# Read config file into variable as as json
kn_config=$(json2hcl -reverse <terraform.tfvars)

# Set variables from json-config
host_cloud=$(jq -r '.provider' <<<"$kn_config")
image_name=$(jq -r '.boot_image' <<<"$kn_config")

# Check for recognized cloud provider
if ! grep -qw "$host_cloud" <<<"openstack gce azure aws"; then
  echo >&2 "Error: unrecognized host cloud '$host_cloud' in config file terraform.tfvars"
  exit 1
fi

# Import image (AWS doesn't need it)
if [ "$host_cloud" = 'openstack' ] || [ "$host_cloud" = 'gce' ] || [ "$host_cloud" = 'azure' ]; then
  export GCE_ACCOUNT_FILE_PATH="$PWD/service-account.json"
  export TF_VARS_FILE="$PWD/terraform.tfvars"
  export IMAGE_NAME="$image_name"
  /KubeNow_root/bin/image-create-"$host_cloud".sh
fi

# Deploy
terraform init --plugin-dir=/terraform_plugins "/KubeNow_root/$host_cloud"

# shellcheck disable=SC2086
terraform apply $TERRAFORM_OPT "/KubeNow_root/$host_cloud"

# Provision
# The --compact-output creates one json-object per line.
# Convert to base64 to preserve whitespace and citations in bash loop
# TODO when jq 1.6 is released change into jq internal base64-decode @base64d
provision=$(echo "$kn_config" | jq -r '.provision[].action')
for action in $(echo "$provision" | jq -r --compact-output '.[] | @base64'); do
  type=$(echo "$action" | base64 --decode | jq -r '.type')
  case "$type" in
  ansible-playbook)
    playbook=$(echo "$action" | base64 --decode | jq -r '.playbook')
    extra_vars=$(echo "$action" | base64 --decode | jq -r --compact-output 'select(.extra_vars != null) | .extra_vars[]')

    # shellcheck disable=SC2086
    ansible-playbook $ANSIBLE_OPT -e \'"$extra_vars"\' "/KubeNow_root/$playbook"
    echo "Done with ansible-playbook: $playbook"
    ;;

  helm)
    # TODO vars=$(echo "$action" | base64 --decode)

    ;;
  esac
done
